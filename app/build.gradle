apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'kotlin-kapt'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: 'com.google.gms.google-services'

def isNeedCrashlyticsDistribution = false
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
        classpath 'io.fabric.tools:gradle:1.27.0'
        classpath "org.jlleitschuh.gradle:ktlint-gradle:6.3.1"
        classpath 'io.fabric.tools:gradle:1.27.0'
        classpath 'com.google.gms:google-services:4.2.0'
    }
}
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.fb.roottest"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [
//                        "room.schemaLocation":"$projectDir/schemas".toString(),
//                        "room.incremental":"true"]
//            }
//        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
//        debug {
//            applicationIdSuffix ".debug"
//
//        }
    }
    dataBinding {
        enabled = true
    }

    applicationVariants.all { variant ->
        variant.assemble.doLast {
            if (isNeedCrashlyticsDistribution) {
                if ("debug" == variant.buildType.name) {
                    //crashlyticsUploadDistributionDebug.execute()
                } else if ("release" == variant.buildType.name) {
                    // crashlyticsUploadDistributionRelease.execute()
                }
            }
        }
    }
}
androidExtensions {
    experimental = true
}
dependencies {

    def nav_version = "1.0.0-beta01"
    def glide_version = "4.8.0"
    def retrofit_version = "2.4.0"
    def kotlin_coroutines = "1.0.1"
    def googlePlayVersion = "16.0.0"
    def room_version = "2.2.0-alpha01" // 2.1.0 for latest stable version
    def googlePlayAnalyticsVersion = "16.0.7"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt 'com.android.databinding:compiler:3.1.4'
    // ViewModel and LiveData
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    // navigation
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"
    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'
    // ktx
    implementation 'androidx.core:core-ktx:1.0.1'
    // coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"
    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"
    implementation 'com.theartofdev.edmodo:android-image-cropper:2.7.0'

    // Room

    implementation "android.arch.persistence.room:runtime:1.1.1"
    kapt "android.arch.persistence.room:compiler:1.1.1"

//    implementation "androidx.room:room-runtime:$room_version"
//    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor
//
//    // optional - Kotlin Extensions and Coroutines support for Room
//    implementation "androidx.room:room-ktx:$room_version"
//
//    // optional - RxJava support for Room
//    implementation "androidx.room:room-rxjava2:$room_version"
//
//    // optional - Guava support for Room, including Optional and ListenableFuture
//    implementation "androidx.room:room-guava:$room_version"
//
//    // Test helpers
//    testImplementation "androidx.room:room-testing:$room_version"

    // Lifecycle components
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    annotationProcessor 'android.arch.lifecycle:compiler:1.1.1'
    implementation 'android.arch.navigation:navigation-fragment:1.0.0'

    //Card scan

    implementation 'com.google.android.gms:play-services-vision:18.0.0'
    implementation 'com.google.firebase:firebase-ml-vision:21.0.0'
    implementation 'com.google.firebase:firebase-core:17.0.0'

    implementation 'com.camerakit:camerakit:1.0.0-beta3.11'
    implementation 'com.camerakit:jpegkit:0.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.31'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.0.1'

//    Encrypt DataBase
    implementation "com.commonsware.cwac:saferoom.x:1.2.1"

    androidTestImplementation "androidx.arch.core:core-testing:2.0.0"
    testImplementation "android.arch.core:core-testing:1.1.1"

    /**Power mock**/
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation('org.powermock:powermock-api-mockito2:2.0.0-beta.5')
    testImplementation('org.powermock:powermock-module-junit4:2.0.0-beta.5')


    // Test
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'org.mockito:mockito-inline:2.8.47'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.nhaarman:mockito-kotlin:1.5.0'
    implementation project(path: ':ocrlibrary')
    // Stetho core
    implementation 'com.facebook.stetho:stetho:1.5.1'
    //If you want to add a network helper
    implementation 'com.facebook.stetho:stetho-okhttp:1.5.1'
}

task increaseVersionCode {
    doLast {
        def code = getVerCode()
        project.logger.debug("code >> " + code)
        File versionPropsFile = file('version.properties')
        Properties versionProps = new Properties()
        try {
            versionProps.load(new FileInputStream(versionPropsFile))
            if (versionPropsFile.canWrite()) {
                versionProps['VERSION_CODE'] = (code + 1).toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            }
        } catch (e) {
            logger.debug(e.getLocalizedMessage())
        }
    }
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "5000"
        }
    }
    repositories {
        google()  // Google's Maven repository
    }
}
